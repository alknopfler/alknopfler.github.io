<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservice on Alknopfler&#39;s Site</title>
    <link>https://alknopfler.github.io/tags/microservice/</link>
    <description>Recent content in microservice on Alknopfler&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alknopfler.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Send Notifications with this Go project (Sms &amp; Email) based on AWS SES/SNS</title>
      <link>https://alknopfler.github.io/post/send-notifications-go-package-sms-emai-based-on-aws-ses-sns/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alknopfler.github.io/post/send-notifications-go-package-sms-emai-based-on-aws-ses-sns/</guid>
      <description>The notificationApp is an open source project based on Go in order to send notifications by different channels (by email, sms, etc&amp;hellip;) using the AWS SNS and AWS SES services. One of the main features of the project, is the possibility to create templates based on places holders (for instance, {{.CustomData.Name}}) and store that template in the database to be used after that by the notification endpoint.
Created by Alknopfler inÂ https://github.com/alknopfler/notificationapp
Features  Templates based on places holder {{.CustomData.XXXX}} Templates Management (Create, Retrieve, and Delete) Templates store based on 3 params:  Template Id Channel (sms, email, and so on&amp;hellip;) Language   Multi-channel and Multi-recipient features (The NotificationsApp is able to send to severals users with different channels) Send Notifications to users using SNS and SES services (AWS services) Custom the message using Custom Data values to replace in the template placesholder API to use all the features  Architecture</description>
    </item>
    
  </channel>
</rss>
