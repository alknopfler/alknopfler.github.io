<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on My New Hugo Site</title>
    <link>http://example.org/categories/golang/</link>
    <description>Recent content in golang on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alexa Skills with Golang</title>
      <link>http://example.org/alexa-skills-with-golang/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/alexa-skills-with-golang/</guid>
      <description>Few weeks ago, I wrote a post about my personal project for a Security Home Alarm System based on Golang, Raspberry PI and 433Mhz sensors ( see again here ).
After that, I thought that the next step for that project could be an Alexa Skill integration, in order to control and manage the Alarm System just with my voice.
This week, I bought a new Amazon Echo Dot, and today, the new functionality is ready to share with all of you ;)</description>
    </item>
    
    <item>
      <title>Send Notifications with this Go project (Sms &amp; Email) based on AWS SES/SNS</title>
      <link>http://example.org/send-notifications-go-package-sms-emai-based-on-aws-ses-sns/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/send-notifications-go-package-sms-emai-based-on-aws-ses-sns/</guid>
      <description>The notificationApp is an open source project based on Go in order to send notifications by different channels (by email, sms, etc&amp;hellip;) using the AWS SNS and AWS SES services. One of the main features of the project, is the possibility to create templates based on places holders (for instance, {{.CustomData.Name}}) and store that template in the database to be used after that by the notification endpoint.
Created by Alknopfler in https://github.</description>
    </item>
    
    <item>
      <title>Design your own Home Alarm System using Go</title>
      <link>http://example.org/design-your-own-home-alarm-system-using-go/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/design-your-own-home-alarm-system-using-go/</guid>
      <description>AlkAlarm is a open source project created to get ready a home Alarm System in few minutes using Golang. In the market you will buy a home system alarm based on 433Mhz sensors and using GSM modules to send the notifications like: 
The main idea of this project is based on the same kind of Alarm GSM systems, but in this case, we only have to buy the sensors and sirens, because:</description>
    </item>
    
    <item>
      <title>GoDataberus - Database Driver API in Golang</title>
      <link>http://example.org/godataberus-database-driver-api-in-golang/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/godataberus-database-driver-api-in-golang/</guid>
      <description>GoDataberus is a &amp;ldquo;Database Driver API&amp;rdquo; in order to reduce the complexity of the CRUD operations in some common databases. The idea is to use Databerus in order to connect to a external DB (using an available DB driver) using the same API independently of the database
Architecture GoDataberus has been developed in Golang and contains:
 Connection Redis store: Redis to store the database&amp;rsquo;s connection data. It return an uuid to use in the following api calls.</description>
    </item>
    
    <item>
      <title>GoLogger - Module to Log with formatting in Golang</title>
      <link>http://example.org/gologger-module-to-log-with-formatting-in-golang/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/gologger-module-to-log-with-formatting-in-golang/</guid>
      <description>GoLogger is a logger module for golang based on logrus module. This module was created to reduce the logrus abstraction in order to use just 2 functions:
 Init() : initialize the logrus params Print(): Print an error with the base fields  Usage:
** Import package **
import ( &amp;quot;github.com/alknopfler/Gologger/gologger&amp;quot; ) Init with stdout and info level:
gologger.Init(os.Stdout, logrus.InfoLevel) Print to show the error message:
gologger.Print(&amp;quot;WARN&amp;quot;,7,&amp;quot;Description to show&amp;quot;,&amp;quot;filename.go&amp;quot;) </description>
    </item>
    
    <item>
      <title>Gocypherator - Module to cypher string in Golang easily</title>
      <link>http://example.org/gocypherator-module-to-cypher-string-in-golang-easily/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/gocypherator-module-to-cypher-string-in-golang-easily/</guid>
      <description>Gocypherator is a cypher module in order to encrypt / decrypt strings based on the following algorithms:
 AES-128, AES-192, or AES-256.  Usage:
First of all, you need to import the module:
import &amp;quot;github.com/alknopfler/gocypherator/cypher&amp;quot; Then you have to initialize the cypher module with the type of algorithm:
func InitKeyCypher(cypherType int) { cypherType could be:
 16 ==&amp;gt; AES 128 24 ==&amp;gt; AES 192 32 ==&amp;gt; AES 256  The following example shows all the features available:</description>
    </item>
    
  </channel>
</rss>
